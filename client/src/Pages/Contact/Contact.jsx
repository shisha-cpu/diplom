import { useState } from "react";
import { motion } from "framer-motion";
import { Mail, Phone, MapPin } from "lucide-react";
import "./contact.css";

const TELEGRAM_BOT_TOKEN = "7206132347:AAE_Mkk08XcCW1pAfxRorHhksQ8ApjCDOH8";
const CHAT_ID = 1137493485
const API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;

const Contact = () => {
  const [formData, setFormData] = useState({ name: "", email: "", message: "" });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
const handleSubmit = async (e) => {
  e.preventDefault();
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞)
  const text = `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\nüë§ –ò–º—è: ${formData.name}\n‚úâ Email: ${formData.email}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message}`;
  
  try {
    const response = await fetch(API_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ 
        chat_id: CHAT_ID, 
        text: text,
        parse_mode: "HTML" // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É
      }),
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${response.statusText}`);
    }
    
    alert("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
    setFormData({ name: "", email: "", message: "" });
  } catch (error) {
    console.error(error);
    alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!");
  }
};
  
  

  return (
    <div className="contact-container">
      <motion.h1
        className="contact-title"
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
      >
        –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏
      </motion.h1>

      <motion.div
        className="contact-grid"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 0.5, duration: 1 }}
      >
        <ContactCard icon={<Mail size={36} />} title="Email" text="contact@edventura.com" />
        <ContactCard icon={<Phone size={36} />} title="–¢–µ–ª–µ—Ñ–æ–Ω" text="+7 999 123-45-67" />
        <ContactCard icon={<MapPin size={36} />} title="–ê–¥—Ä–µ—Å" text="–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–æ–≥—Ä–µ—Å—Å–∞, 21" />
      </motion.div>

      <motion.form
        className="contact-form"
        initial={{ scale: 0.9, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ delay: 0.8, duration: 0.6 }}
        onSubmit={handleSubmit}
      >
        <h2>–û—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</h2>
        <input type="text" name="name" placeholder="–í–∞—à–µ –∏–º—è" value={formData.name} onChange={handleChange} required />
        <input type="email" name="email" placeholder="–í–∞—à Email" value={formData.email} onChange={handleChange} required />
        <textarea name="message" placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" value={formData.message} onChange={handleChange} required />
        <motion.button type="submit" whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </motion.button>
      </motion.form>
    </div>
  );
};

const ContactCard = ({ icon, title, text }) => (
  <motion.div className="contact-card" whileHover={{ scale: 1.05 }} transition={{ duration: 0.3 }}>
    <div className="contact-card-icon">{icon}</div>
    <h3 className="contact-card-title">{title}</h3>
    <p className="contact-card-text">{text}</p>
  </motion.div>
);

export default Contact;
